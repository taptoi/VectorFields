#pragma kernel DFVField

#include "UnityCG.cginc"
#include "SimplexNoise3D.cginc"
#include "SimplexNoise4D.cginc"
#include "GPUVoronoiNoise4D.cginc"

 // Particle's data
struct Particle
{
    float3 position;
    float3 velocity;
    float life;
};

// Particle's data, shared with the shader
RWStructuredBuffer<Particle> particleBuffer;

//RWStructuredBuffer<float3> gradientBuffer;


// Variables set from the CPU
float deltaTime;
float time;
//int resX;
//int resY;
//int resZ;
int scaleX;
int scaleY;
int scaleZ;
float gradientFactor;
float boundaryForceFactor;
float vNoiseFactor;
float sNoiseFactor;
float noiseScale;
float vNoiseTimeScale;
float sNoiseTimeScale;
float delta;
float seedShift;
float voronoiFreq;
float voronoiAmp;
float voronoiJitter;
int voronoiOctaves;

// Hash function from H. Schechter & R. Bridson, goo.gl/RXiKaH
uint Hash(uint s)
{
    s ^= 2747636419u;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    return s;
}

float Random(uint seed)
{
    return float(Hash(seed)) / 4294967295.0; // 2^32-1
}

int getFlattenedIndex(int x, int y, int z, int lenX, int lenY, int lenZ)
{
    return z * (lenY * lenX) + y * (lenX) + x;
}

float3 up(float3 pos, float delta)
{
    return float3(pos.x, pos.y + delta, pos.z);
}

float3 down(float3 pos, float delta)
{
    return float3(pos.x, pos.y - delta, pos.z);
}

float3 left(float3 pos, float delta)
{
    return float3(pos.x - delta, pos.y, pos.z);
}

float3 right(float3 pos, float delta)
{
    return float3(pos.x + delta, pos.y, pos.z);
}

float3 forward(float3 pos, float delta)
{
    return float3(pos.x, pos.y, pos.z + delta);
}

float3 back(float3 pos, float delta)
{
    return float3(pos.x, pos.y, pos.z - delta);
}

float3 gradient(float left,
                float right,
                float up,
                float down,
                float forward,
                float back, 
                float delta)
{
    float h = 0.5 * delta;
    return float3(h * (right - left), h * (up - down), h * (forward - back));
}

float3 gradientOpt(float pos,
                   float left,
                   float down,
                   float back,
                   float delta)
{
    return float3(delta * (pos - left), delta * (pos - down), delta * (pos - back));
}

float divergence(float left,
                float right,
                float up,
                float down,
                float forward,
                float back, 
                float delta)
{
    float h = 0.5 * delta;
    return h * (right - left) + h * (up - down) + h * (forward - back);
}


float vornoise(float4 p)
{
    float2 ns = fBm_F1_F0(p, voronoiOctaves, voronoiJitter, voronoiFreq, voronoiAmp);
    return length(ns);
}

float gauss(float x)
{
    float a = 3.0;
    float b = 0.02;
    float c = 0.71;
    return a * exp(-1 * pow((b * x * x * x), 3)) / c - 4.2;

}


[numthreads(256, 1, 1)]
void DFVField(uint3 id : SV_DispatchThreadID)
{
    float px = particleBuffer[id.x].position.x;
    float py = particleBuffer[id.x].position.y;
    float pz = particleBuffer[id.x].position.z;
    float3 p = float3(px, py, pz);
    particleBuffer[id.x].life -= deltaTime;

    // Pos
    float n_1 = vornoise(vNoiseFactor * float4(p, vNoiseTimeScale * time));
    float n_2 = snoise4(sNoiseFactor * float4(p, sNoiseTimeScale * time + seedShift)); 
 

    // Down
    float n_dn_1 = vornoise(vNoiseFactor * float4(down(p, delta), vNoiseTimeScale * time));
    float n_dn_2 = snoise4(sNoiseFactor * float4(down(p, delta * 10), sNoiseTimeScale * time));


    // Left
    float n_lt_1 = vornoise(vNoiseFactor * float4(left(p, delta), vNoiseTimeScale * time));
    float n_lt_2 = snoise4(sNoiseFactor * float4(left(p, delta * 10), sNoiseTimeScale * time));

    // Back
    float n_bc_1 = vornoise(vNoiseFactor * float4(back(p, delta), vNoiseTimeScale * time));
    float n_bc_2 = snoise4(sNoiseFactor * float4(back(p, delta * 10), sNoiseTimeScale * time));


    float3 grad1 = gradientOpt(n_1,
                                n_lt_1,
                                n_dn_1,
                                n_bc_1, 
                                delta);

    float3 grad2 = gradientOpt(n_2,
                            n_lt_2,
                            n_dn_2,
                            n_bc_2, 
                            delta);
    float3 vf = cross(grad1, grad2);


    //float4 ns = snoise(float3(px + noiseScale, py + noiseScale, pz + noiseScale));
    //float3 c = float3(scaleX / 2.0, scaleY / 2.0, scaleZ / 2.0);
    //float dcx = px - c.x;
    //float dcy = py - c.y;
    //float dcz = pz - c.z;

    //particleBuffer[id.x].velocity.x += boundaryForceFactor * gauss(dcx);
    //particleBuffer[id.x].velocity.y += boundaryForceFactor * gauss(dcy);
    //particleBuffer[id.x].velocity.z += boundaryForceFactor * gauss(dcz);

    particleBuffer[id.x].velocity = 0.1 * particleBuffer[id.x].velocity + 1.0 * gradientFactor * vf;
    particleBuffer[id.x].velocity.y += -0.05 * particleBuffer[id.x].position.y;
    particleBuffer[id.x].velocity.x += -0.05 * particleBuffer[id.x].position.x;
    particleBuffer[id.x].velocity.z += -0.05 * particleBuffer[id.x].position.z;
    //particleBuffer[id.x].velocity.z += 0.1 / particleBuffer[id.x].position.z;
    particleBuffer[id.x].velocity.z += -0.00001 * boundaryForceFactor * (1 + sin(0.01 * time)) * particleBuffer[id.x].position.z * particleBuffer[id.x].position.z * particleBuffer[id.x].position.y;
    particleBuffer[id.x].position += particleBuffer[id.x].velocity * deltaTime;


    if(particleBuffer[id.x].life < 0)
    {
        particleBuffer[id.x].life = 20;
        particleBuffer[id.x].position.x = floor(Random(id.x) * scaleX) * 0.5;
        particleBuffer[id.x].position.y = Random(id.x + 1) *  scaleY;
        particleBuffer[id.x].position.z = Random(id.x + 2) *  scaleZ;
        particleBuffer[id.x].velocity = float3(0, 0, 2);
    }

}