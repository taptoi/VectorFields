#pragma kernel DFVField

#include "UnityCG.cginc"
#include "SimplexNoise3D.cginc"
#include "GPUVoronoiNoise4D.cginc"

 // Particle's data
struct Particle
{
    float3 position;
    float3 velocity;
    float life;
};

// Particle's data, shared with the shader
RWStructuredBuffer<Particle> particleBuffer;

RWStructuredBuffer<float3> gradientBuffer;


// Variables set from the CPU
float deltaTime;
float time;
int resX;
int resY;
int resZ;
int scaleX;
int scaleY;
int scaleZ;
float gradientFactor;
float noiseFactor;
float noiseScale;
float noiseTimeScale;
float delta;
float seedShift;
int octaves = 1;

// Hash function from H. Schechter & R. Bridson, goo.gl/RXiKaH
uint Hash(uint s)
{
    s ^= 2747636419u;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    return s;
}

float Random(uint seed)
{
    return float(Hash(seed)) / 4294967295.0; // 2^32-1
}

int getFlattenedIndex(int x, int y, int z, int lenX, int lenY, int lenZ)
{
    return z * (lenY * lenX) + y * (lenX) + x;
}

float3 up(float3 pos, float delta)
{
    return float3(pos.x, pos.y + delta, pos.z);
}

float3 down(float3 pos, float delta)
{
    return float3(pos.x, pos.y - delta, pos.z);
}

float3 left(float3 pos, float delta)
{
    return float3(pos.x - delta, pos.y, pos.z);
}

float3 right(float3 pos, float delta)
{
    return float3(pos.x + delta, pos.y, pos.z);
}

float3 forward(float3 pos, float delta)
{
    return float3(pos.x, pos.y, pos.z + delta);
}

float3 back(float3 pos, float delta)
{
    return float3(pos.x, pos.y, pos.z - delta);
}

float3 gradient(float left,
                float right,
                float up,
                float down,
                float forward,
                float back, 
                float delta)
{
    float h = 0.5 * delta;
    return float3(h * (right - left), h * (up - down), h * (forward - back));
}

float3 gradientOpt(float pos,
                   float left,
                   float down,
                   float back,
                   float delta)
{
    return float3(delta * (pos - left), delta * (pos - down), delta * (pos - back));
}

float divergence(float left,
                float right,
                float up,
                float down,
                float forward,
                float back, 
                float delta)
{
    float h = 0.5 * delta;
    return h * (right - left) + h * (up - down) + h * (forward - back);
}


float vornoise(float4 p, int oct)
{
    float2 ns = inoise(p, 0.1);
    return length(ns);
}


[numthreads(256, 1, 1)]
void DFVField(uint3 id : SV_DispatchThreadID)
{
    float px = particleBuffer[id.x].position.x;
    float py = particleBuffer[id.x].position.y;
    float pz = particleBuffer[id.x].position.z;
    float3 p = float3(px, py, pz);
    particleBuffer[id.x].life -= deltaTime;

    // Divergence Free Vector field with Voronoi Noise:
    /*
    float n_1 = fBm_F0(float4(p, 1), octaves);
    float n_2 = fBm_F0(float4(p, 1 + seedShift), octaves);
    // Up
    float n_up_1 = fBm_F0(float4(up(p, delta), 1), octaves);
    float n_up_2 = fBm_F0(float4(up(p, delta), 1 + seedShift), octaves);
    // Down
    float n_dn_1 = fBm_F0(float4(down(p, delta), 1), octaves);
    float n_dn_2 = fBm_F0(float4(down(p, delta), 1 + seedShift), octaves);
    // Left
    float n_lt_1 = fBm_F0(float4(left(p, delta), 1), octaves);
    float n_lt_2 = fBm_F0(float4(left(p, delta), 1 + seedShift), octaves);
    // Right
    float n_rt_1 = fBm_F0(float4(right(p, delta), 1), octaves);
    float n_rt_2 = fBm_F0(float4(right(p, delta), 1 + seedShift), octaves);
    // Forward
    float n_fw_1 = fBm_F0(float4(forward(p, delta), 1), octaves);
    float n_fw_2 = fBm_F0(float4(forward(p, delta), 1 + seedShift), octaves);
    // Back
    float n_bc_1 = fBm_F0(float4(back(p, delta), 1), octaves);
    float n_bc_2 = fBm_F0(float4(back(p, delta), 1 + seedShift), octaves);
    */
    /*
    // Up
    float n_up_1 = snoise(up(p, delta));
    float n_up_2 = snoise(up(p, delta) + seedShift);
    // Down
    float n_dn_1 = snoise(down(p, delta));
    float n_dn_2 = snoise(down(p, delta) + seedShift);
    // Left
    float n_lt_1 = snoise(left(p, delta));
    float n_lt_2 = snoise(left(p, delta) + seedShift);
    // Right
    float n_rt_1 = snoise(right(p, delta));
    float n_rt_2 = snoise(right(p, delta) + seedShift);
    // Forward
    float n_fw_1 = snoise(forward(p, delta));
    float n_fw_2 = snoise(forward(p, delta) + seedShift);
    // Back
    float n_bc_1 = snoise(back(p, delta));
    float n_bc_2 = snoise(back(p, delta) + seedShift);
    */

    // Pos
    float n_1 = snoise(0.001 * p);
    float n_2 = vornoise(float4(p, noiseTimeScale * time + seedShift), octaves);

    // Up
    // float n_up_1 = snoise(0.001 * up(p, delta));
    // float n_up_2 = snoise(0.001 * up(p, delta) + seedShift);

    // float n_up_1 = vornoise(float4(up(p, delta), noiseTimeScale * time), octaves);
    // float n_up_2 = vornoise(float4(up(p, delta), noiseTimeScale * time + seedShift), octaves);
 

    // Down
    float n_dn_1 = snoise(0.001 * down(p, delta));
    //float n_dn_2 = snoise(0.001 * down(p, delta) + seedShift);
    //float n_dn_1 = vornoise(float4(down(p, delta), noiseTimeScale * time), octaves);
    float n_dn_2 = vornoise(float4(down(p, delta), noiseTimeScale * time + seedShift), octaves);


    // Left
    float n_lt_1 = snoise(0.001 * left(p, delta));
    //float n_lt_2 = snoise(0.001 * left(p, delta) + seedShift);
    //float n_lt_1 = vornoise(float4(left(p, delta), noiseTimeScale * time), octaves);
    float n_lt_2 = vornoise(float4(left(p, delta), noiseTimeScale * time + seedShift), octaves);

    // Right
    // float n_rt_1 = snoise(0.001 * right(p, delta));
    // float n_rt_2 = snoise(0.001 * right(p, delta) + seedShift);
    // float n_rt_1 = vornoise(float4(right(p, delta), noiseTimeScale * time), octaves);
    // float n_rt_2 = vornoise(float4(right(p, delta), noiseTimeScale * time + seedShift), octaves);

    // Forward
    // float n_fw_1 = snoise(0.001 * forward(p, delta));
    // float n_fw_2 = snoise(0.001 * forward(p, delta) + seedShift);
    // float n_fw_1 = vornoise(float4(forward(p, delta), noiseTimeScale * time), octaves);
    // float n_fw_2 = vornoise(float4(forward(p, delta), noiseTimeScale * time + seedShift), octaves);

    // Back
    float n_bc_1 = snoise(0.001 * back(p, delta));
    //float n_bc_2 = snoise(0.001 * back(p, delta) + seedShift);
    //float n_bc_1 = vornoise(float4(back(p, delta), noiseTimeScale * time), octaves);
    float n_bc_2 = vornoise(float4(back(p, delta), noiseTimeScale * time + seedShift), octaves);


    // Compute the vector field point:
    /*float3 grad1 = gradient(n_up_1,
                            n_dn_1,
                            n_lt_1,
                            n_rt_1,
                            n_fw_1,
                            n_bc_1, 
                            delta);*/
    float3 grad1 = gradientOpt(n_1,
                                n_lt_1,
                                n_dn_1,
                                n_bc_1, 
                                delta);
    /*float3 grad2 = gradient(n_up_2,
                            n_dn_2,
                            n_lt_2,
                            n_rt_2,
                            n_fw_2,
                            n_bc_2, 
                            delta);
                            */
    float3 grad2 = gradientOpt(n_2,
                            n_lt_2,
                            n_dn_2,
                            n_bc_2, 
                            delta);
    float3 vf = cross(grad1, grad2);


    float4 ns = snoise(float3(px + noiseScale, py + noiseScale, pz + noiseScale));
    particleBuffer[id.x].velocity = 0.8 * particleBuffer[id.x].velocity + gradientFactor * 50 * vf;
    particleBuffer[id.x].velocity.y += noiseFactor * ns.y * (sin(time * noiseTimeScale));
    particleBuffer[id.x].velocity.z -= noiseFactor * ns.z;
    particleBuffer[id.x].position += particleBuffer[id.x].velocity * deltaTime;


    if(particleBuffer[id.x].life < 0)
    {
        particleBuffer[id.x].life = 50;
        particleBuffer[id.x].position.x = Random(id.x) * scaleX;
        particleBuffer[id.x].position.y = Random(id.x + 1) * scaleY;
        particleBuffer[id.x].position.z = Random(id.x + 2) * scaleZ;
        particleBuffer[id.x].velocity = 0;
    }

}